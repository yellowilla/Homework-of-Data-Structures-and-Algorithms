#include<stdio.h>


const int n = 10;
const int m = 5;

#define MAX_NUM_OF_KEY 6 //关键字最大项为6
#define RADIX 10 //10进制

typedef struct{
    int keys[MAX_NUM_OF_KEY];
    int bitsnum; //关键字的位数
}RcdType;

//对关键字的第i位计数，并按计数数组for_count的值，将数组A复制到数组B中
void RadixPass(RcdType *A, RcdType *B, int n, int i)
{
    int for_count[RADIX] = {0};
    int j, k;
    for(k = 0; k < n; ++k)
    {
        for_count[A[k].keys[i]]++; //对关键字的第i位计数
    }
    for(j = 1; j < RADIX; ++j)
    {
        for_count[j] = for_count[j - 1] + for_count[j];
    }
    for(k = n-1; k >=0; --k)
    {
        j = A[k].keys[i];
        B[for_count[j] - 1] = A[k];
        for_count[j]--;
    }
}

//对数组a进行排序，a的长度为length,a中元素的位数为bitsnum
void RadixSort(RcdType *a, int length, int bitsnum)
{
    RcdType C[length]; //开设同等大小的辅助空间用于复制数据
    int i = bitsnum - 1;
    while(i >= 0)
    {
        RadixPass(a, C, length, i); //对a进行一趟基数排序，排序结果存入C
        i--;
        if(i >= 0)
        {
            RadixPass(C, a, length, i); //对C进行一趟基数排序，排序结果存入a
            i--;
        }
        else
            for(int j = 0; j < length; ++j)
                a[j] = C[j]; //排序后的结果在C中，复制至a中
    }
    for(int i = 0; i < m; ++i)
    {
        for(int j = 0; j < bitsnum; ++j)
        {
            printf("%d", a[i].keys[j]);
        }
        printf(" ");
    }
    printf("\n");
}

int main()
{
    RcdType a[n];
    int length = n;
    int bitsnum = 3;
    for(int i = 0; i < length; ++i)
    {
        for(int j = 0; j < bitsnum; ++j)
        {
            scanf("%d", &(a[i].keys[j]));
        }
        printf("\n");
    }
    RadixSort(a, length, bitsnum);
    return 0;
}
