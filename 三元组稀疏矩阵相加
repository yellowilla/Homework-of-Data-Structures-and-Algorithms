#include <iostream>

using namespace std;

const int MAXSIZE = 1000;

typedef int ElemType;
typedef struct{
    int i, j;
    ElemType e;
}Triple;
typedef struct{
    Triple data[MAXSIZE + 1];
    int mu, nu, tu;
}TSMatrix;

bool SumTSM(TSMatrix A, TSMatrix B, TSMatrix &C)
{
    if(A.mu<0 || A.nu<0 || A.tu<0 || B.mu<0 || B.nu<0 || B.tu<0)
        return false;
    else if(A.mu!=B.mu || A.nu!=B.nu)
        return false;
    C.mu = A.mu; C.nu = A.nu;
    C.tu =  0;
    ElemType x1, x2;
    for(int row = 1; row <= A.mu; ++row)
        for(int col = 1; col <= A.nu; ++col)
    {
        for(int p = 1; p <= A.tu; ++p)
        {
            if(row == A.data[p].i && col == A.data[p].j)
             {
                 x1 = A.data[p].e;
                 break;
             }
            else
                x1 = 0;
        }
        for(int q = 1; q <= B.tu; ++q)
        {
            if(row == B.data[q].i && col == B.data[q].j)
            {
                x2 = B.data[q].e;
                break;
            }
            else
                x2 = 0;
        }
        if(x1 + x2 != 0)
        {
            C.tu++;
            C.data[C.tu].i = row;
            C.data[C.tu].j = col;
            C.data[C.tu].e = (x1 + x2);
        }
    }
    return true;
}

int main()
{
    TSMatrix A, B, C;
    A.mu = 3; A.nu = 3; A.tu = 3;
    B.mu = 3; B.nu = 3; B.tu = 3;
    int p;
    for(p = 1; p <= A.tu; ++p)
        cin >> A.data[p].i >> A.data[p].j >> A.data[p].e;
    cout << endl;
    for(p = 1; p <= B.tu; ++p)
        cin >> B.data[p].i >> B.data[p].j >> B.data[p].e;
    cout << endl;
    SumTSM(A, B, C);
    for(p = 1; p <= C.tu; ++p)
        cout << C.data[p].i << " " << C.data[p].j << " " << C.data[p].e << endl;
    return 0;
}
